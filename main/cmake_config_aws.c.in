#include "cmake_config_aws.h"

/**
 * @brief 健值对metadata
 * 
 */
typedef struct config_key_value
{
    char key[128];
    char value[512];
} config_key_value;

/**
 * @brief 存储配置建值
 * 
 */
static config_key_value aws_env_config[] = {
    {ENV_DEF_2STR(AWS_WEBRTC_CHANNEL), AWS_WEBRTC_CHANNEL},
    {ENV_DEF_2STR(AWS_DEFAULT_REGION), AWS_DEFAULT_REGION},
    {ENV_DEF_2STR(AWS_KVS_CACERT_PATH), AWS_KVS_CACERT_PATH},
    {ENV_DEF_2STR(AWS_ACCESS_KEY_ID), AWS_ACCESS_KEY_ID},
    {ENV_DEF_2STR(AWS_SECRET_ACCESS_KEY), AWS_SECRET_ACCESS_KEY},
    {ENV_DEF_2STR(AWS_SESSION_TOKEN), AWS_SESSION_TOKEN},
    {ENV_DEF_2STR(AWS_IOT_CORE_THING_NAME), AWS_IOT_CORE_THING_NAME},
    {ENV_DEF_2STR(AWS_IOT_CORE_CREDENTIAL_ENDPOINT), AWS_IOT_CORE_CREDENTIAL_ENDPOINT},
    {ENV_DEF_2STR(AWS_IOT_CORE_CERT), AWS_IOT_CORE_CERT},
    {ENV_DEF_2STR(AWS_IOT_CORE_PRIVATE_KEY), AWS_IOT_CORE_PRIVATE_KEY},
    {ENV_DEF_2STR(AWS_IOT_CORE_ROLE_ALIAS), AWS_IOT_CORE_ROLE_ALIAS},
    {ENV_DEF_2STR(AWS_KVS_LOG_LEVEL), AWS_KVS_LOG_LEVEL},
    {ENV_DEF_2STR(AWS_ENABLE_FILE_LOGGING), AWS_ENABLE_FILE_LOGGING},
    {ENV_DEF_2STR(AWS_DEBUG_LOG_SDP), AWS_DEBUG_LOG_SDP}};

/**
 * @brief 比较字符串
 * 
 * @param str1 
 * @param str2 
 * @return int 
 */
static int aws_strcmp(const char *str1, const char *str2)
{
    int ret = 0;
    while (!(ret = *(unsigned char *)str1 - *(unsigned char *)str2) && *str1)
    {
        str1++;
        str2++;
    }

    if (ret < 0)
    {
        return -1;
    }
    else if (ret > 0)
    {
        return 1;
    }
    return 0;
}

/**
 * @brief 根据key查询对应的值
 * 
 * @param key 健
 * @return char* 对应值
 */
char *aws_env_value_by_key(char *key)
{
    // printf("aws_env_config num is %ld\n", sizeof(aws_env_config)/sizeof(aws_env_config[0]));
    int size = sizeof(aws_env_config) / sizeof(aws_env_config[0]);
    for (int i = 0; i < size; i++)
    {
        if (aws_strcmp(aws_env_config[i].key, key) == 0)
        {
            //printf("[key=%s, value=%s]\n", aws_env_config[i].key, aws_env_config[i].value);
            if (aws_strcmp(aws_env_config[i].value, "") == 0)
            {
                return '\0';
            }
            else
            {
                return aws_env_config[i].value;
	    }
        }
    }
    // printf("env not found value by key=%s\n", key);
    return '\0';
}
